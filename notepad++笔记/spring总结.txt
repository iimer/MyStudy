springboot：new SpringApplication里面将入口配置类，web类型，配置文件中的Initializers和Listeners存进去。
然后就会调run方法，读取配置文件中的事件Listener来发布启动过程中内置的生命周期事件，封装args参数，
准备环境变量这些环境变量是有优先级的，然后控制台打印bannner，根据new时的web类型创建applicationcontext容器，
从配置文件中加载异常报告器实例，给刚创建的ApplicationContext容器做些准备工作如设置环境变量到reader，scanner，
调全部Initializers的初始化方法。然后就是比较关键的refresh方法。见下。
再调刷新的后置处理方法，这里为空方法。调ApplicationRunner和CommandLineRunner的run方法，实现spring容器启动后的逻辑。
若启动过程中抛出异常，此时用异常报告器来报告异常。最后返回容器。







new一个AnnotationConfigApplicationContext后，调用构造方法，然后注册很多强大的bean定义，如用来解析配置类的，也为后面的Sca
nn做了一个包含的配置，典型的就是@Component注解,然后调用register()方法注册入口配置类，然后进入最核心的refresh()方法，
其中一个方法中按照一定次序执行实现了Bean工厂后置处理器的bean定义的这个实现方法，有代表性的就是之前的用来解
析配置类的，它的实现方法让带有@Configuration的类的开始对应的scan，如果还存在@Component注解就会循环scan，还有@Bean注解的，
@Import等注解的类注册到bean定义map中。
其中@Import和@Bean都是在scan后面的load方法中完成bean定义注册的。这里后面的process方法在spring中常常就不会执行，springboot中
会去执行，而且十分关键，将自动配置类经过几个配置文件和各个conditional来选择性注册到bean定义map中，后面再调load方法将@Bean，
@Import，@ImportResource等加载进去，这里会进行第二次conditional过滤。
这个方法最后还会调用之前实现了bean定义注册后置处理器的Bean工厂后置处理器的方法，因为bean定义注册后置处理器都是继承Bean工
厂后置处理器的，主要就是给@Bean生成动态代理类，然后调用自己实现了bean工厂后置处理器的方法。
refresh中还有其他用途的方法，就比如用来实现国际化的，用来实现监听器和事件多播器的，主要还有bean后置处理器的相关注册和创建bean的方法，
bean后置处理器的相关注册完之后，创建bean主要分为实例化、属性赋值、初始化阶段，其中有9个bean后置处理器，大概就是用来实例化前直接返回bean、
AOP解析切面生成一堆advisors，@AutoWired、@Value的预解析，还有后面的依赖注入，初始化前还有看有没有@PostContruct，初始化后
创建AOP代理。
refresh里面的onfresh，在springboot里面是来创建tomcat容器的，而spring中则是空。其实代码没变，只是new的是ApplicationContext的另个实现类，
是带servletWebServer的，里面重写了这个方法。

依赖注入时会有循环依赖问题，spring用了三级缓存来实现。

springaop原理：切面、切点、




// SpringApplication.java
public ConfigurableApplicationContext run(String... args) {
// new 一个StopWatch用于统计run启动过程花了多少时间
StopWatch stopWatch = new StopWatch();
// 开始计时
stopWatch.start();
ConfigurableApplicationContext context = null;
// exceptionReporters集合用来存储异常报告器，用来报告SpringBoot启动过程的异常
Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();
// 配置headless属性，即“java.awt.headless”属性，默认为ture
// 其实是想设置该应用程序,即使没有检测到显示器,也允许其启动.对于服务器来说,是不需要显示器的,所以要这样设置.
configureHeadlessProperty();
// 【1】从spring.factories配置文件中加载到EventPublishingRunListener对象并赋值给SpringApplicationRunListeners
// EventPublishingRunListener对象主要用来发射SpringBoot启动过程中内置的一些生命周期事件，标志每个不同启动阶段
SpringApplicationRunListeners listeners = getRunListeners(args);
// 启动SpringApplicationRunListener的监听，表示SpringApplication开始启动。
// 》》》》》发射【ApplicationStartingEvent】事件
listeners.starting();
try {
// 创建ApplicationArguments对象，封装了args参数
ApplicationArguments applicationArguments = new DefaultApplicationArguments(
args);
// 【2】准备环境变量，包括系统变量，环境变量，命令行参数，默认变量，servlet相关配置变量，随机值，
// JNDI属性值，以及配置文件（比如application.properties）等，注意这些环境变量是有优先级的
// 》》》》》发射【ApplicationEnvironmentPreparedEvent】事件
ConfigurableEnvironment environment = prepareEnvironment(listeners,
applicationArguments);
// 配置spring.beaninfo.ignore属性，默认为true，即跳过搜索BeanInfo classes.
configureIgnoreBeanInfo(environment);
// 【3】控制台打印SpringBoot的bannner标志
Banner printedBanner = printBanner(environment);
// 【4】根据不同类型创建不同类型的spring applicationcontext容器
// 因为这里是servlet环境，所以创建的是AnnotationConfigServletWebServerApplicationContext容器对象
context = createApplicationContext();
// 【5】从spring.factories配置文件中加载异常报告期实例，这里加载的是FailureAnalyzers
// 注意FailureAnalyzers的构造器要传入ConfigurableApplicationContext，因为要从context中获取beanFactory和environment
exceptionReporters = getSpringFactoriesInstances(
SpringBootExceptionReporter.class,
new Class[] { ConfigurableApplicationContext.class }, context); // ConfigurableApplicationContext是AnnotationConfigServletWebServerApplicationContext的父接口
// 【6】为刚创建的AnnotationConfigServletWebServerApplicationContext容器对象做一些初始化工作，准备一些容器属性值等
// 1）为AnnotationConfigServletWebServerApplicationContext的属性AnnotatedBeanDefinitionReader和ClassPathBeanDefinitionScanner设置environgment属性
// 2）根据情况对ApplicationContext应用一些相关的后置处理，比如设置resourceLoader属性等
// 3）在容器刷新前调用各个ApplicationContextInitializer的初始化方法，ApplicationContextInitializer是在构建SpringApplication对象时从spring.factories中加载的
// 4）》》》》》发射【ApplicationContextInitializedEvent】事件，标志context容器被创建且已准备好
// 5）从context容器中获取beanFactory，并向beanFactory中注册一些单例bean，比如applicationArguments，printedBanner
// 6）TODO 加载bean到application context，注意这里只是加载了部分bean比如mainApplication这个bean，大部分bean应该是在AbstractApplicationContext.refresh方法中被加载？这里留个疑问先
// 7）》》》》》发射【ApplicationPreparedEvent】事件，标志Context容器已经准备完成
prepareContext(context, environment, listeners, applicationArguments,
printedBanner);
// 【7】刷新容器，这一步至关重要，以后会在分析Spring源码时详细分析，主要做了以下工作：
// 1）在context刷新前做一些准备工作，比如初始化一些属性设置，属性合法性校验和保存容器中的一些早期事件等；
// 2）让子类刷新其内部bean factory,注意SpringBoot和Spring启动的情况执行逻辑不一样
// 3）对bean factory进行配置，比如配置bean factory的类加载器，后置处理器等
// 4）完成bean factory的准备工作后，此时执行一些后置处理逻辑，子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置
// 在这一步，所有的bean definitions将会被加载，但此时bean还不会被实例化
// 5）执行BeanFactoryPostProcessor的方法即调用bean factory的后置处理器：
// BeanDefinitionRegistryPostProcessor（触发时机：bean定义注册之前）和BeanFactoryPostProcessor（触发时机：bean定义注册之后bean实例化之前）
// 6）注册bean的后置处理器BeanPostProcessor，注意不同接口类型的BeanPostProcessor；在Bean创建前后的执行时机是不一样的
// 7）初始化国际化MessageSource相关的组件，比如消息绑定，消息解析等
// 8）初始化事件广播器，如果bean factory没有包含事件广播器，那么new一个SimpleApplicationEventMulticaster广播器对象并注册到bean factory中
// 9）AbstractApplicationContext定义了一个模板方法onRefresh，留给子类覆写，比如ServletWebServerApplicationContext覆写了该方法来创建内嵌的tomcat容器
// 10）注册实现了ApplicationListener接口的监听器，之前已经有了事件广播器，此时就可以派发一些early application events
// 11）完成容器bean factory的初始化，并初始化所有剩余的单例bean。这一步非常重要，一些bean postprocessor会在这里调用。
// 12）完成容器的刷新工作，并且调用生命周期处理器的onRefresh()方法，并且发布ContextRefreshedEvent事件
refreshContext(context);
// 【8】执行刷新容器后的后置处理逻辑，注意这里为空方法
afterRefresh(context, applicationArguments);
// 停止stopWatch计时
stopWatch.stop();
// 打印日志
if (this.logStartupInfo) {
new StartupInfoLogger(this.mainApplicationClass)
.logStarted(getApplicationLog(), stopWatch);
}
// 》》》》》发射【ApplicationStartedEvent】事件，标志spring容器已经刷新，此时所有的bean实例都已经加载完毕
listeners.started(context);
// 【9】调用ApplicationRunner和CommandLineRunner的run方法，实现spring容器启动后需要做的一些东西比如加载一些业务数据等
callRunners(context, applicationArguments);
}
// 【10】若启动过程中抛出异常，此时用FailureAnalyzers来报告异常
// 并》》》》》发射【ApplicationFailedEvent】事件，标志SpringBoot启动失败
catch (Throwable ex) {
handleRunFailure(context, ex, exceptionReporters, listeners);
throw new IllegalStateException(ex);
}
try {
// 》》》》》发射【ApplicationReadyEvent】事件，标志SpringApplication已经正在运行即已经成功启动，可以接收服务请求了。
listeners.running(context);
}
// 若出现异常，此时仅仅报告异常，而不会发射任何事件
catch (Throwable ex) {
handleRunFailure(context, ex, exceptionReporters, null);
throw new IllegalStateException(ex);
}
// 【11】最终返回容器
return context;
}